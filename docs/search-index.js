var searchIndex = JSON.parse('{\
"pyscemu":{"doc":"","t":[3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Emu","allocated_size","arguments","borrow","borrow_mut","bp_clear_all","bp_get_addr","bp_get_inst","bp_get_mem_read","bp_get_mem_write","bp_set_addr","bp_set_inst","bp_set_mem_read","bp_set_mem_write","bp_show","dump","dump_dwords","dump_n","dump_qwords","extract","extract","free","from","get_addr_base","get_addr_name","into","into_py","is_mapped","items_iter","lazy_type_object","mem_test","memory_alloc","memory_overlaps","print_maps","print_maps_by_keyword","read_buffer","read_bytes","read_string","read_string_of_bytes","read_wide_string","run_hook","save","save_all_allocs","search_bytes","search_spaced_bytes","search_spaced_bytes_from","search_spaced_bytes_from_bw","search_spaced_bytes_in_all","search_string","search_string_in_all","show_allocs","try_from","try_into","type_id","type_object_raw","vzip","wrap","write_buffer","write_spaced_bytes","write_wide_string"],"q":["pyscemu","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","show the total allocated memory.","","","","clear all the breakpoints","get the current address breakpoint","get breakpoint on a instrunction counter","get the memory breakpoint on read","get the memory breakpoint on write","set breakpoint on an address","set breakpoint on a instruction counter","set a memory breakpoint on read","set a memory breakpoint on write","breakpoints show breakpoints","visualize the bytes on the given address.","visualize a number of dwords on a given address.","visualize the <code>amount</code> of bytes provided on <code>address</code>.","visualize a number of qwords on given address.","","","free a memory map by its name","Returns the argument unchanged.","get the base address of a given address. Will make an …","get the memory map name where is the given address.  Will …","Calls <code>U::from(self)</code>.","","this method checks if the given address is allocated or …","","","perform a memory test to see overlapps or other possible …","basic allocator, it looks for a free block of given size, …","show if there are memory blocks overlapping eachother.","print all the memory maps on the process address space.","print all the maps that match a substring of the keyword …","read a buffer from the emulator memory to a python list of …","read an amount of bytes from an address to a python object.","read an ascii string from a memory address,  if the …","read an amount of bytes from an address to a string of …","read a wide string from a memory address,  if the address …","use a synchronous loop with step() instead of using the …","save a chunk of memory to disk.","Save all memory blocks allocated during emulation to disk. …","search a bytes object on specific map, will return a list …","search spaced hex bytes string on specific map using its …","search one occurence of a spaced hex bytes from a specific …","search one occcurence of a spaced hex bytes from an …","search spaced hex bytes string on all the memory layout,  …","search a substring on a specific memory map name, it will …","Search a substring in all the memory layout except on …","show all the memory blocks allocated during the emulation.","","","","","","","write a python list of bytes to the emulator memory.","write on emulators memory a spaced hexa bytes","write a wide string on memory."],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[0,[1,[[3,[2]]]],[4,[[6,[5]]]],[[]],[[]],[1],[1,[[3,[7]]]],[1,[[3,[7]]]],[1,[[3,[7]]]],[1,[[3,[7]]]],[[1,7]],[[1,7]],[[1,7]],[[1,7]],[1],[[1,7]],[[1,7,7]],[[1,7,7]],[[1,7,7]],[5,[[3,[1]]]],[5,[[3,[1]]]],[[1,8]],[[]],[[1,7],[[3,[7]]]],[[1,7],[[3,[9]]]],[[]],[[1,4],10],[[1,7],[[3,[11]]]],[[],12],[[],13],[1,[[3,[11]]]],[[1,7],[[3,[7]]]],[[1,7,7],[[3,[11]]]],[1],[[1,8]],[[1,7,2],[[3,[[15,[14]]]]]],[[1,7,2],3],[[1,7],[[3,[9]]]],[[1,7,2],[[3,[9]]]],[[1,7],[[3,[9]]]],[[1,10]],[[1,7,7,9]],[[1,9]],[[1,[15,[14]],8],[[3,[[15,[7]]]]]],[[1,8,8],[[3,[[15,[7]]]]]],[[1,8,7],[[3,[7]]]],[[1,7,8],[[3,[7]]]],[[1,8],[[3,[[15,[7]]]]]],[[1,8,8],[[3,[[15,[7]]]]]],[[1,9]],[1],[[],16],[[],16],[[],17],[4,18],[[]],[4,[[16,[[6,[5]],19]]]],[[1,7]],[[1,7,8],[[3,[11]]]],[[1,7,8]]],"p":[[3,"Emu"],[15,"usize"],[6,"PyResult"],[3,"Python"],[3,"PyAny"],[3,"Py"],[15,"u64"],[15,"str"],[3,"String"],[6,"PyObject"],[15,"bool"],[3,"PyClassItemsIter"],[3,"LazyTypeObject"],[15,"u8"],[3,"Vec"],[4,"Result"],[3,"TypeId"],[3,"PyTypeObject"],[3,"PyErr"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
